
# Import necisary packages.
from os import sep
import pubchempy as pcp
import pandas as pd
from collections import defaultdict
import numpy as np
from numpy import nan

import sys
if sys.version_info[0] < 3: 
    from StringIO import StringIO
else:
    from io import StringIO

#Read in .csv file with necisary data into pandas.
dataset = pd.read_csv ("/Users/celinyounan/desktop/list_of_chemicals.csv")

# Rename column Chemical name to Chemical_Name
dataset.rename(columns = {'Chemical name' : 'Chemical_Name'}, inplace = True)

# Extract Chemical_Name column.
ChemList_Column = dataset.loc[:,'Chemical_Name']

# Step 1: Create DataFrame containing all chemical Names

# Convert ChemList_Column from searies to DataFrame
ChemList_df = ChemList_Column.to_frame()

# Extract column values.
ChemList = ChemList_Column.values

# View DataFrame (Step 1: DataFrame contining Chemical Names)
ChemList_df

# Step 2: Obtain CIDs to add to ChemList_df

# Get CIDs (Chemical IDs from pubchem)
# Loop
# For every chemical in ChemList (i)
# Get Chemical IDs
# Output is cidlist (List of chemical IDs for each chemical (contains duplicates for some chemicals))

cidlist = []
for i in ChemList_df.Chemical_Name:
    cid = pcp.get_cids(i)
    cidlist.append(cid)

# convert cidlist to DataFrame
cidlist_df = pd.DataFrame(cidlist)

# Name columns in cidlist_df to be able to extract CIDs in first column
cidlist_df.columns = ['CID', '1', '2', '3', '4', '5', '6', '7','8']

# Pull first column to remove duplicates
cid_DF = cidlist_df.filter(['CID'])

# Add CIDs to ChemList_df
ChemList_df['CID'] = cid_DF

# Step 3: Obtain Molecular Formula and add to ChemList_df

# Get Molecular Formula
# Input is cidlist
# CIDs and Molecular Formulas as output from pubchem

Formula = []
for i in cidlist:
    if not i:
        Formula.append('')
    else:
        form = pcp.get_properties(['MolecularFormula'], i)
        Formula.append(form)

# Get Molecular Formulas
Formula_list = []

for i in range(len(Formula)):
    group=[]
    for j in range(len(Formula[i])):
        value = Formula[i][j]['MolecularFormula']
        group.append(value);
    Formula_list.append(group)

# convert formula_list to a dataframe
Formula_df = pd.DataFrame(Formula_list)

# Name columns in formula Dataframe
Formula_df.columns = ['Formula', '1', '2', '3', '4', '5', '6', '7','8']

# Obtain first column from Formula DataFrame to remove duplicates
Formula_DF = Formula_df.filter(['Formula'])

# Add column of Molecular formulas to ChemList_df
ChemList_df['Formula'] = Formula_DF

# Step 4: Obtain Molecular Weight and add to ChemList_df

MolecularWeight = []
for i in cidlist:
    if not i:
        MolecularWeight.append('')
    else:
        MW = pcp.get_properties('MolecularWeight', i)
        MolecularWeight.append(MW)

# Get Molecular Weight
MolecularWeight_list = []

for i in range(len(MolecularWeight)):
    group=[]
    for j in range(len(MolecularWeight[i])):
        value = MolecularWeight[i][j]['MolecularWeight']
        group.append(value);
    MolecularWeight_list.append(group)

# convert MolecularWeight_list to a dataframe
MolecularWeight_df = pd.DataFrame(MolecularWeight_list)

# Name columns in cidlist_df to be able to extract CIDs in first column
MolecularWeight_df.columns = ['MW', '1', '2', '3', '4', '5', '6', '7','8']

# Obtain first column from Formula DataFrame to remove duplicates
MolecularWeight_DF = MolecularWeight_df.filter(['MW'])

# Add column of Molecular formulas to ChemList_df
ChemList_df['MW'] = MolecularWeight_DF

# Step 5: Obtain SMILES and add to ChemList_df

# Get Properties
# Input is cidlist
# CIDs and SMILES as output from pubchem

proplist = []
for i in cidlist:
    if not i:
        proplist.append('')
    else:
        prop = pcp.get_properties(['canonical_smiles'], i)
        proplist.append(prop)

# Get SMILES
smiles = []

for i in range(len(proplist)):
    group=[]
    for j in range(len(proplist[i])):
        value = proplist[i][j]['CanonicalSMILES']
        group.append(value);
    smiles.append(group)

# convert formula_list to a dataframe
SMILES_df = pd.DataFrame(smiles)

# Name columns in cidlist_df to be able to extract CIDs in first column
SMILES_df.columns = ['Canonical_SMILES', '1', '2', '3', '4', '5', '6', '7','8']

# Obtain first column from Formula DataFrame to remove duplicates
SMILES_DF = SMILES_df.filter(['Canonical_SMILES'])

# Add column of Molecular formulas to ChemList_df
ChemList_df['Canonical_SMILES'] = SMILES_DF

# Step 6: SwissADME

# FireFox Browser MUST be installed on your computer. 

# Install selenium package (only once)
# pip install selenium

# install geckodriver (only once)
# pip install geckodriver-autoinstaller

# Import necisary packages.
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import csv
import requests
import geckodriver_autoinstaller

# Must do every time to be sure geckodriver for Firefox is in PATH
geckodriver_autoinstaller.install();

# Loop to scrape SwissADME database.
SwissADME_links = []

for i in ChemList_df.Canonical_SMILES: 
    # open Firefox browser
    browser = webdriver.Firefox()
    # WAIT (to be sure browser opened)
    browser.implicitly_wait(30)
    # Navigate to SwissADME database
    browser.get("http://www.swissadme.ch")
    if pd.isna(i):
        SwissADME_links.append('')
        # Close browser window
        browser.close()
    else:
        # Select search box and input SMILES
        smiles_search_ADME = browser.find_element_by_name("smiles").send_keys(i)
        # Find and click Run button once SMILES are input
        run = browser.find_element_by_id("submitButton").submit()
        # WAIT for new page to load
        browser.implicitly_wait(80)
        # Retrieve output as CSV link
        csvlinks_ADME = browser.find_element_by_xpath('//*[@id="sib_body"]/div[8]/a[1]').get_property('href')
        browser.implicitly_wait(80)
        # Append CSV links (from previous line) into one large list.
        SwissADME_links.append(csvlinks_ADME)
        # WAIT for CSV links to be saved
        browser.implicitly_wait(100)
        # Close browser window
        browser.close()
        # Starts process again for the next SMILES
           
# Download SwissADME CSV links and append into data.
ADME_data = []
for i, d in enumerate(SwissADME_links):
        if not i:
            ADME_data.append('')
        else:
            data = pd.read_csv(d, sep=",")
            print(data)
            # print(type(data))
            # ADME_data.append(data)
           # Convert data into pandas dataframe and remove duplicate rows. 
           # ADME_Final = pd.DataFrame(ADME_data)


print(ADME_data)         

# Concatonate all dataframes in ADME_data into one dataframe
# ADME_Final1 = pd.concat(ADME_data)
# OR
# Convert data into pandas dataframe and remove duplicate rows. 
# ADME_Final = pd.DataFrame(ADME_data)

# Convert to CSV
ADME_data.to_csv('/Users/celinyounan/desktop/ADME_data.csv')